#
# Configure minipc.
# Assumptions:
# - ssh access with permissions to sudo to root
# - disk partitioned (200MB on EFI, 50 GB on /, rest on /home, 4096 MB on SWAP)
#
# An inventory which looks like this:
# target-host:
#   hostsfile:
#     - name: printer
#       ip: 192.168.0.2
#     - name: other-server
#       ip: 192.168.0.3
#       ...
#   users:
#     - name: alice
#       gecos: "Alice,,,"
#       groups:
#         - ssh-access
#     - name: bob
#       gecos: "Bob,,,"
#       groups: ""
#
- hosts: "{{ target }}"
  vars:
    dconf_settings:
      - key: "/org/gnome/desktop/interface/text-scaling-factor"
        value: "1.25"
        comment: "Make sure text size is bigger"
      - key: "/org/gnome/desktop/session/idle-delay"
        value: "uint32 0"
        comment: "Make sure screensaver is disabled"
      - key: "/org/gnome/desktop/screensaver/lock-enabled"
        value: "false"
        comment: "Make sure lockscreen is disabled"

  tasks:
    - name: Make sure OS is up to date
      apt: 
        update_cache: yes
        upgrade: full
      become: true

    - name: Make sure all applications are installed
      apt:
        name: "{{ item }}"
      loop:
        - mlocate
        - mpv
        - net-tools
        # Needed by package_facts Ansible module
        - python3-apt
        # Needed by dconf Ansible module
        - python3-psutil
        - vim
      become: true

    - name: Find out which packages are installed
      package_facts:

    - name: Make sure Google Chrome is installed
      apt: 
        deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      become: true
      when: not "google-chrome-stable" in ansible_facts.packages

    - name: Make sure all groups are in place
      group:
        name: "ssh-access"
      become: true

    - name: Limit ssh access to users in ssh-access group
      lineinfile:
        path: /etc/ssh/sshd_config
        line: AllowGroups ssh-access
        regexp: '^AllowGroups .*$'
      become: true
      register: sshd_update

    - name: Restart sshd
      service:
        name: sshd
        state: restarted
      when: sshd_update.changed
      become: true

    - name: Check which users already exists
      getent:
        database: passwd
        key: "{{ item.name }}"
      register: users_check
      ignore_errors: true
      loop: "{{ users }}"

    - name: Make sure all users are in place
      user:
        name: "{{ item.name }}"
        comment: "{{ item.gecos }}"
        shell: "/bin/bash"
        state: present
        append: true
        groups: "{{ item.groups }}"
      loop: "{{ users }}"
      become: true

    - name: Make sure newly created users get asked to set password on logon
      command: "passwd -de {{ item.item.name }}"
      loop: "{{ users_check.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      when: item.failed
      become: true

    - name: "Make sure gnome is configured for all users"
      dconf:
        key: "{{ item.1.key }}"
        value: "{{ item.1.value }}"
      become_user: "{{ item.0.name }}"
      become: true
      loop: "{{ users|product(dconf_settings)|list }}"
      loop_control:
        label: "For user {{ item.0.name }}: {{ item.1.comment }}"

    - name: Make sure /etc/hosts is correctly set up
      lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.name }}"
        regexp: '^{{ item.ip }}.*{{ item.name }}$'
      loop: "{{ hostsfile }}"
      become: true
