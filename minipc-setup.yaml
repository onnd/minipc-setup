#
# Configure minipc.
# Assumptions:
# - ssh access with permissions to sudo to root
# - disk partitioned (200MB on EFI, 50 GB on /, rest on /home, 4096 MB on SWAP)
#
# An inventory which looks like this:
# target-host:
#   hostsfile:
#     - name: printer
#       ip: 192.168.0.2
#     - name: other-server
#       ip: 192.168.0.3
#       ...
#   ddclient_login: <domain for ddclient>
#   ddclient_password: <password for ddclient>
#   rclone_config: |
#     <rclone config file here>
#   users:
#     - name: alice
#       gecos: "Alice,,,"
#       groups:
#         - ssh-access
#     - name: bob
#       gecos: "Bob,,,"
#       groups: ""
#   autologin: bob  # non-manatory variable
#
# Run the playbook like this:
# ansible-playbook minipc-setup.yaml -e target=<hostname> -K
#
# It's probably a good idea to reboot afterwards.
#

- hosts: "{{ target }}"
  tasks:
    - name: Make sure OS is up to date
      apt: 
        update_cache: yes
        upgrade: full
      become: true

    - name: Ensure all apt repositories are in place
      apt_repository:
        repo: ppa:nicotine-team/stable
        state: present
      become: true

    - name: Make sure all apt keys are in place
      apt_key:
        keyserver: keyserver.ubuntu.com
        id: 6CEB6050A30E5769 #Nicotine
      become: true

    - name: Make sure all required applications are installed
      apt:
        name:
          - ddclient
          - firefox
          - gthumb
          - higan
          # For hardware acceleration in browsers
          - intel-gpu-tools
          - intel-media-va-driver-non-free
          - lm-sensors
          - mlocate
          - mpv
          - net-tools
          - nicotine
          # Needed by package_facts Ansible module
          - python3-apt
          # Needed by dconf Ansible module
          - python3-psutil
          - rclone
          - samba
          - sysfsutils
            # VA-API HW acceleration info
          - vainfo
          - vim
          - zsnes
      become: true

    - name: Find out which packages are installed
      package_facts:

    - name: Make sure Google Chrome is installed
      apt: 
        deb: https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
      become: true
      when: not "google-chrome-stable" in ansible_facts.packages

    - name: Make sure all groups are in place
      group:
        name: "ssh-access"
      become: true

    - name: Limit ssh access to users in ssh-access group
      lineinfile:
        path: /etc/ssh/sshd_config
        line: AllowGroups ssh-access
        regexp: '^AllowGroups .*$'
      become: true
      register: sshd_update

    - name: Kernel setting for Kingston SSD disk compatibility
      lineinfile:
        path: /etc/default/grub
        line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash nvme_core.default_ps_max_latency_us=0"'
        regexp: '^GRUB_CMDLINE_LINUX_DEFAULT=.*$'
      become: true
      register: grub_update

    - name: Restart sshd
      service:
        name: sshd
        state: restarted
      when: sshd_update.changed
      become: true

    - name: run update-grub
      command: update-grub
      when: grub_update.changed
      become: true

    - name: Check which users already exist
      getent:
        database: passwd
        key: "{{ item.name }}"
      register: users_check
      ignore_errors: true
      loop: "{{ users }}"

    - name: Make sure all users are in place
      user:
        name: "{{ item.name }}"
        comment: "{{ item.gecos }}"
        shell: "/bin/bash"
        state: present
        append: true
        groups: "{{ item.groups }}"
      loop: "{{ users }}"
      become: true

    - name: Make sure newly created users get asked to set password on logon
      command: "passwd -de {{ item.item.name }}"
      loop: "{{ users_check.results }}"
      loop_control:
        label: "{{ item.item.name }}"
      when: item.failed
      become: true

    - name: Make sure autologin is enabled if requested
      ini_file:
        path: /etc/gdm3/custom.conf
        section: daemon
        option: AutomaticLogin
        value: "{{ autologin }}"
        create: no
      become: true
      when: autologin is defined

    - name: Make sure gnome is configured for all users
      dconf:
        key: "{{ item.1.key }}"
        value: "{{ item.1.value }}"
      become_user: "{{ item.0.name }}"
      become: true
      loop: "{{ users|product(dconf_settings)|list }}"
      loop_control:
        label: "For user {{ item.0.name }}: {{ item.1.comment }}"
      vars:
        dconf_settings:
        - key: "/org/gnome/desktop/interface/text-scaling-factor"
          value: "1.25"
          comment: "Make sure text size is bigger"
        - key: "/org/gnome/desktop/session/idle-delay"
          value: "uint32 0"
          comment: "Make sure screensaver is disabled"
        - key: "/org/gnome/desktop/screensaver/lock-enabled"
          value: "false"
          comment: "Make sure lockscreen is disabled" 

    - name: Make sure /etc/hosts is correctly set up
      lineinfile:
        path: /etc/hosts
        line: "{{ item.ip }} {{ item.name }}"
        regexp: '^{{ item.ip }}.*{{ item.name }}$'
      loop: "{{ hostsfile }}"
      become: true

    - name: Make sure rclone configuration is in place
      copy:
        content: "{{ rclone_config }}"
        dest: "/home/{{ ansible_user_id }}/.config/rclone/rclone.conf"
        mode: 0600

    - name: Ensure ddclient is configured
      template:
        src: ddclient.conf.j2
        dest: /etc/ddclient.conf
        owner: root
        group: root
        mode: 0600
      become: true
      register: ddclient_config_update

    - name: Restart ddclient
      service:
        name: ddclient
        state: restarted
      when: ddclient_config_update.changed
      become: true

    - name: Make sure Program directory exists
      file:
        path: "/home/{{ ansible_user_id }}/Program"
        mode: 0755
        state: directory

    - name: Make sure user owned files are copied in place
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      loop:
        - src: backup-rclone.sh
          dest: "/home/{{ ansible_user_id }}/Program/backup-rclone.sh"
          mode: "0755"

    - name: Make sure system files are copied in place
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        mode: "{{ item.mode }}"
      become: true
      loop:
        - src: smbusers
          dest: /etc/samba/smbusers
          mode: 0644
          owner: root
          group: root
        - src: 11-monitor.conf
          dest: /usr/share/X11/xorg.conf.d/11-monitor.conf
          mode: 0644
          owner: root
          group: root

    - name: Ensure backup cron job is set up
      cron:
        name: backup-rclone
        user: "{{ ansible_user_id }}"
        minute: "55"
        hour: "23"
        job: "/home/{{ ansible_user_id }}/Program/backup-rclone.sh 1> /tmp/backup.log 2> /tmp/backup.err"

    - name: Set up music symlinks
      file:
        path: "{{ item.path }}"
        src: "{{ item.src }}"
        state: link
      loop:
        - path: "/home/{{ ansible_user_id }}/Musik"
          src: "/home/{{ ansible_user_id }}/Backups/current/Music"
        - path: "/home/{{ ansible_user_id }}/Julmusik"
          src: "/home/{{ ansible_user_id }}/Backups/current/Documents/Julmusik"

    - name: Ensure samba shares are set up
      ini_file:
        path: /etc/samba/smb.conf
        section: "{{ item.section }}"
        option: "{{ item.option }}"
        value: "{{ item.value }}"
        create: no
      become: true
      loop: # Should be some better way...
        - section: "global"
          option: "username map"
          value: "/etc/samba/smbusers"
        # nuc
        - section: "nuc"
          option: "comment"
          value: "NUC public SMB share"
        - section: "nuc"
          option: "path"
          value: "/home/anton/Public"
        - section: "nuc"
          option: "read only"
          value: "no"
        - section: "nuc"
          option: "guest ok"
          value: "yes"
        # music
        - section: "music"
          option: "comment"
          value: "NUC public music share"
        - section: "music"
          option: "path"
          value: "/home/anton/Backups/current/Music"
        - section: "music"
          option: "read only"
          value: "yes"
        - section: "music"
          option: "guest ok"
          value: "yes"
        # julmusik
        - section: "julmusik"
          option: "comment"
          value: "NUC public Christmas music share"
        - section: "julmusik"
          option: "path"
          value: "/home/anton/Backups/current/Documents/Julmusik"
        - section: "julmusik"
          option: "read only"
          value: "yes"
        - section: "julmusik"
          option: "guest ok"
          value: "yes"
